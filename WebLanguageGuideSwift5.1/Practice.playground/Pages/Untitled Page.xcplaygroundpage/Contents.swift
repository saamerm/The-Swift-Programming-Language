import Foundation
// Return the character that appears the maximum number of times. If there is a tie, return the character that appears first
func maximumOccurringCharacter(text: String) -> Character {
    // Write your code here
    var dictionaryA = [Character:Int]()
    for char in text{
        if dictionaryA[char] != nil{
            try{
            dictionaryA[char]! += dictionaryA[char]!
            }
        } else {
            try{
            dictionaryA[char] = 1
            }   
        }
    }
    let arr: Array<Int> = dictionaryA.values.sorted()
    var result: Character = " "

    for char in text{
        if dictionaryA[char] == arr.last{
            result = char
            break
        }
    }
    return result
}


let text = "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"

let result = maximumOccurringCharacter(text: text)

print(result)
